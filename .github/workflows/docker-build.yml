name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
    #   - .github/workflows/**

jobs:
#   build:
#     runs-on: ubuntu-latest
#     environment: Production

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
          
#       - name: Install Docker Compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker-compose

#       - name: Create .env file
#         run: |
#           # Create a .env file for Docker Compose
#           echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> ./backend/.env
#           echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> ./backend/.env
#           echo "PORT=${{ secrets.PORT }}" >> ./backend/.env
#           echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./backend/.env

#       - name: Build Docker image
#         run: |
#           docker-compose -f ./backend/docker-compose.yml -f ./backend/docker-compose.prod.yml up -d --build


#       - name: Push Docker image
#         run: |
#           docker-compose -f ./backend/docker-compose.yml -f ./backend/docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    # needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Server
        env:
        #   DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        #   MONGODB_URL: ${{ secrets.MONGODB_URL }}
        #   CLIENT_URL: ${{ secrets.CLIENT_URL }}
        #   PORT: ${{ secrets.PORT }}
          DOMAIN: ${{ secrets.DOMAIN }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

        run: |
            # Install sshpass
            sudo apt-get update
            sudo apt-get install -y sshpass

            # SSH into the server
            SSHPASS="${SSH_PASSWORD}" sshpass -e ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no -p "${SERVER_SSH_PORT}" root@"${DOMAIN}" << 'EOF'
            # Remove existing app directory and clone the latest version
            rm -rf todo-app || { echo "Failed to remove existing app directory"; exit 1; }
            git clone https://github.com/AliSat81/todo-app.git || { echo "Failed to clone repository"; exit 1; }
            cd todo-app/backend || { echo "Failed to change directory"; exit 1; }

            # Create a .env file for Docker Compose
            echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" > .env || { echo "Failed to create .env file"; exit 1; }
            echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> .env || { echo "Failed to append CLIENT_URL to .env"; exit 1; }
            echo "PORT=${{ secrets.PORT }}" >> .env || { echo "Failed to append PORT to .env"; exit 1; }

            # Load nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"


            # Use the correct Node.js version
            nvm use 18.0.0 || { echo "Failed to use Node.js version 18.0.0"; exit 1; }

            # Stop and remove the existing container if it exists
            docker stop todo-app || true
            docker rm todo-app || true

            # Remove the existing image
            docker rmi ${DOCKER_USERNAME}/todo-app:latest || true

            # Build and run the application using Docker
            yarn docker:prod || { echo "Failed to build and run the application"; exit 1; }
            EOF

            # Check if the SSH command succeeded
            if [ $? -ne 0 ]; then
            echo "Deployment failed."
            exit 1
            fi

            echo "Deployment succeeded."
