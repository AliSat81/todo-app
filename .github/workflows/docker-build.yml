name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - .github/workflows/**

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create .env file
        run: |
          # Create a .env file for Docker Compose
          echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> ./backend/.env
          echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> ./backend/.env
          echo "PORT=${{ secrets.PORT }}" >> ./backend/.env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./backend/.env

      - name: Build Docker image
        run: |
          docker-compose -f ./backend/docker-compose.yml -f ./backend/docker-compose.prod.yml up -d --build


      - name: Push Docker image
        run: |
          docker-compose -f ./backend/docker-compose.yml -f ./backend/docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Server
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PORT: ${{ secrets.PORT }}
          DOMAIN: ${{ secrets.DOMAIN }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

        run: |
          sudo apt-get install sshpass -y
          SSHPASS="${SSH_PASSWORD}" sshpass -e ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no -p ${SERVER_SSH_PORT} root@${DOMAIN} "
          docker pull alirezasa/todo-app:latest &&
          docker stop todo-app || true &&
          docker rm todo-app || true &&
          docker run -d --name todo-app -p 2087:2087 alirezasa/todo-app:latest
          "
